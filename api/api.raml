#%RAML 1.0
title: s_project
version: 1.1
baseUri: /api
types:
  basicObj_S:
    properties:
      status: string
      errors?: errorList
    example:
      status: "200"

  error_S:
    properties:
      status: string
      errors: errorList

  errorList:
    properties: {
      fieldName: error
      }

  error:
    properties:
      name: string
      description: string
    example:
      name: "login"
      description: "login already exists"

  rsaKey_Q:
    properties:
      time: number
      pubKey: #тодо добавление шифрования на всё
        type: string
        description: свой pubkey
    example:
      time: 1516618258
      pubKey: "Cq6UA076Sv1d..."

  rsaKey_S:
    properties:
      pubKey: string
    example:
      pubKey: "QqfhFTUd..."


  userInfo:
    properties:
      login:
        type: string
        description: шифрованный
      password:
        type: string
        description: шифрованный
    example:
      login: "9+K3xmRNTaXG9sV..."
      password: "dRTCq6UA076..."

  userInfoShort:
    properties:
      login:
        type: string
    example:
      login: "user3"

  regInfo:
    type: userInfo
    properties:
      email:
        type: string
        description: шифрованный
    example:
      login: "9+K3xmRNTaXG9sV..."
      password: "dRTCq6UA076..."
      email: "89C1SyUCOQm..."

  userOptions_Q:
    properties:
      tGramm?:
        type: string
        default: ""
      allowSendLogs?:
        type: boolean
        default: 0
      allowTempPass?:
        type: boolean
        default: 0
      tempPassDuration?: number
      email?: string
      curPass?: string
      newPass?: string
    example:
      tGramm: "@gramm"
      allowSendLogs: true
      allowTempPass: true
      tempPassDuration: 600
      email: "a@a.ru"
      curPass: "jK2TIwGoP/Za3N..."
      newPass: "IBAAKBgQC..."

  userOptions_S:
    properties:
      tGramm:
        type: string
        default: ""
      allowSendLogs:
        type: boolean
        default: 0
      allowTempPass:
        type: boolean
        default: 0
      tempPassDuration: number
      email: string
      example:
        tGramm: "@gramm"
        allowSendLogs: true
        allowTempPass: true
        tempPassDuration: 600
        email: "a@a.ru"

  accountInfoShort:
    properties:
      login: string
    example:
        login: "user"

  accountInfo:
    type: accountInfoShort
    properties:
      login: string
      email: string

  accountInfo_PQ:
    type: accountInfoShort
    properties:
      login: string
      email: string
      password: string

  accountInfo_UQ:
    type: accountInfoShort
    properties:
      login: string
      email?: string
      password?: string

  accountInfo_S:
    properties:
      nick: string
      email: string
      level: number
      money: number
      tradePermission: boolean
      closeFriends: string[]

  itemShort:
    properties:
      assetId: number #тодо дописать поля
      classId: number
      amount: number

  item:
    type: itemShort
    properties:
      assetId: number[]
      appId: number
      amount: number
      classId: number
      contextId: number
      instanceId: number
      isCurrency: boolean
      frozen: boolean


  itemDescription:
    properties:
      appId: number
      classId: number
      instanceId?: number
      marketFeeApp?: number
      commodity?: number
      currency?: number
      iconUrl?: string
      iconUrlLarge?: string
      marketHashName?: string
      marketMarketableRestriction?: number
      marketName?: string
      marketTradableRestriction?: number
      marketable?: number
      name?: string
      sellOffers?: number
      buyOffers?: number
      sellPerDay?: number
      sellDayMax?: number
      buyPriceMax?: number
      buyPriceAvg?: number
      sellOffersPrice?: number
      sellOffersPriceMin?: number
      sellOffersPriceAvg?: number


  bag:
    properties:
      id: number
      name: string
      items: item[]
      itemDescriptions: itemDescription[]

  bagShort:
    properties:
      items: itemShort[] #тодо (item | itemShort)[]

  bag_GQ:
    properties:
      id: number

  inventory:
    properties:
      user: string
      bags: bag[]

  inventory_Bag_GQ:
    properties:
      user: string
      bags: bag_GQ[]

  inventory_Bag_GS:
    properties:
      user: string
      bags: bag[]

  exchangeQueryLite_PQ:
    properties:
      bag: bagShort
      accountFrom: string
      accountTo: string
      asap:
        type: boolean
        default: 0

  exchangeQueryLiteShort:
    properties:
      id: integer

  exchangeQueryLite_PS:
    properties:
      id: integer
      bag: bagShort
      accountFrom: string
      accountTo: string
      asap:
        type: boolean
        default: 0

  exchangeQueryLite_GS:
    properties:
      id: integer
      bag: bag
      accountFrom: string
      accountTo: string
      asap:
        type: boolean
        default: 0

  exchangeQueryComplex_PQ:
    properties:
      exchangeQueries:
        type: exchangeQueryLite_PQ[]
        description: Упорядочены строго по последовательности обмена

  exchangeQueryComplex_PS:
    properties:
      exchangeQueries:
        type: exchangeQueryLite_PS[]
        description: Упорядочены строго по последовательности обмена

  exchangeQueryComplex_GS:
    properties:
      exchangeQueries:
        type: exchangeQueryLite_GS[]
        description: Упорядочены строго по последовательности обмена

  exchangeQueryComplex_DQ:
    properties:
      exchangeQueries:
        type: exchangeQueryLiteShort[]

  exchangeQueryComplex_DS:
    type: exchangeQueryComplex_DQ


/access_token:
  description: Обновить access token имея refresh token
  /get:
    post:
      body:
        application/json:
          properties: 
            refreshToken: string
      responses: 
        200:
          body:
            application/json:
              properties: 
                accessToken: string
                refreshToken?: string
                expires: number
        401:
          description: Неверный refresh token
          body:
            application/json:
              type: error_S

/exchange:
  description: Запросить провести обмен
  /post:
    post:
      body:
        application/json:
          properties:
            type: exchangeQueryComplex_PQ
      responses:
        200:
          body:
            application/json:
              properties:
                  type: exchangeQueryComplex_PS
                  description: содержит успешно принятые сервером запросы

  /get:
    post:
      description: Вернёт все обмены юзера
      body:
        application/json: {}

      responses:
        200:
          body:
            application/json:
              properties:
                  type: exchangeQueryComplex_GS
                  description: содержит активные обмены
  /delete:
    post:
      description: Удалить обмен с соответствующим ид
      body:
        application/json:
          properties:
            type: exchangeQueryComplex_DS

      responses:
        200:
          body:
            application/json:
              properties:
                  type: exchangeQueryComplex_DS
                  description: содержит отменённый обмен


/inventory:
  description: Получить инвентарь
  /get:
    post:
      body:
        application/json:
          properties:
            accountInfos:
              type: accountInfoShort[]
              description: Пустой получить всё

      responses:
        200:
          body:
            application/json:
              properties:
                inventories: inventory[]
  /bag:
    /get:
      post:
        body:
          application/json:
            properties:
              accountInfos:
                type: inventory_Bag_GQ
                description: Передаются ид сумок и имя юзера

        responses:
          200:
            body:
              application/json:
                type: inventory_Bag_GS

/logout:
  /post:
    post:
      body:
        application/json:
          properties: 
            refreshToken: string
      responses: 
        200:
          body:
            application/json:
              

/login:
  description: Аунтефикация
  /post:
    post:
      description: Выполнить вход зашифровав ранее полученым ключём
      body:
        application/json:
          properties:
            userInfo: userInfo
      responses:
        200:
          body:
            application/json:
              properties:
                userInfo: userInfoShort
                userOptions: userOptions_S
                status: string
                accessToken: string
                refreshToken: string
                expires: number
        400:
          body:
            application/json:
              type: error_S
  /put:
    post:
      description: Изменить настройки или пароль
      body:
        application/json:
          properties:
            userOptions: userOptions_Q

      responses:
        200:
          body:
            application/json:
              properties:
                userOptions: userOptions_S
        400:
          body:
            application/json:
              type: error_S


/registration:
  description: Регистрация
  /post:
    post:
      description: Отправить данные зашифрованые для регистрации
      body:
        application/json:
          properties:
            userInfo:
              type: regInfo
      responses:
        200:
          body:
            application/json:
              properties:
                userInfo: userInfoShort
                userOptions: userOptions_S
                status: string
        400:
          body:
            application/json:
              type: error_S

/getrsakey:
  description: Получить ключ для шифрования
  /get:
    post:
      description: Получение ключа шифрования, отправка своего.
      body:
        application/json:
          properties:
            rsaKey: rsaKey_Q

      responses:
        200:
          description: Возвращает ключ, которым потом шифруются нужные данные
          body:
            application/json:
              properties:
                rsaKey: rsaKey_S
                status: string
        400:
          body:
            application/json:
              type: error_S

/account:
  description: Управление аккаунтами
  /post:
    post:
      description: Добавить аккаунт
      body:
        application/json:
          properties:
            accountInfo:
              description: Поля шифруются
              type: accountInfo_PQ
      responses:
        200:
          body:
            application/json:
              properties:
                accountInfo: accountInfo_S
        400:
          body:
            application/json:
              type: error_S

  /get:
    post:
      description: Получить все аккаунты
      body:
        application/json: {}
      responses:
        200:
          body:
            application/json:
              properties:
                accountInfos:
                  type: accountInfo_S[]
        400:
          body:
            application/json:
              type: error_S

  /put:
    post:
      description: Изменить аккаунт
      body:
        application/json:
          properties:
            accountInfo:
              type: accountInfo_UQ
      responses:
        200:
          body:
            application/json:
              properties:
                accountInfo: accountInfo_S
        400:
          body:
            application/json:
              properties:
                accountInfo: accountInfoShort
                status: string
                errors: errorList

  /delete:
    post:
      description: Удалить аккаунт
      body:
        application/json:
          properties:
            accountInfo:
              type: accountInfoShort

      responses:
        200:
          body:
            application/json:
              properties:
                accountInfo: accountInfoShort
        400:
          body:
            application/json:
              properties:
                accountInfo: accountInfoShort
                status: string
                errors: errorList
